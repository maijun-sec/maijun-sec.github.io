<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【转载】静态代码分析中间表示基本概念</title>
    <url>/2022/10/24/program-representation-ast-ssa/</url>
    <content><![CDATA[<p><strong>说明</strong>：本文是作者首发在华为云bbs上的原创文章，原文链接是：<a href="https://bbs.huaweicloud.com/blogs/227535">https://bbs.huaweicloud.com/blogs/227535</a></p>
<h2 id="0-简介"><a href="#0-简介" class="headerlink" title="0 简介"></a>0 简介</h2><p>静态代码分析是指在不实际执行程序的情况下，对代码语义和行为进行分析，由此找出程序中由于错误的编码导致异常的程序语义或未定义的行为。它能在软件开发流程早期就发现代码中的各种问题，从而提高开发效率和软件质量。</p>
<span id="more"></span>

<p>静态代码分析，从工具实现的角度，就是开发一款分析器，对程序源代码进行分析，识别程序中的各种类型的问题。为了识别这些问题，开发分析器就需要不同的实现方式（算法），这时候，为了让分析器在实现时更加简洁、高效，就需要对源代码进行处理，转换为一种针对特定的分析器算法和源码在语义上等价的，但是更加简洁、高效、实用的表示形式，也就是中间表示。</p>
<p>就像源码，里面包含各种注释等内容，很不方便分析，一般也不会基于源码来直接分析，都会转换为某种格式来分析。当然，我们介绍的都是当前静态代码分析（编译原理）里面最经典的一些中间表示。首先，会介绍一下AST，然后会介绍一下三地址码，随后介绍一下SSA形式的三地址码，最后介绍一下什么是CFG（包括BB块）和CG。</p>
<h2 id="1-AST和三地址码"><a href="#1-AST和三地址码" class="headerlink" title="1 AST和三地址码"></a>1 AST和三地址码</h2><p>在介绍AST和三地址码时，我们用一个简单的例子：<code>x = 3 + 4 * y</code> 这个表达式作为例子来进行介绍。</p>
<h2 id="1-1-AST"><a href="#1-1-AST" class="headerlink" title="1.1 AST"></a>1.1 AST</h2><p>抽象语法树（Abstract Syntax Tree，AST）是源代码的抽象语法结构的树状表示，树上的每个节点都表示源代码中的一种结构，之所以说是抽象的，是因为抽象语法树并不会表示出真实语法出现的每一个细节。</p>
<p>实际上，抽象语法树，其实就是用树状结构表示语法结构，也没有说必须是什么形式，只要能忠实地反映出源码的格式即可。在<a href="https://xie.infoq.cn/article/6f8ff63d6b88480c05f805d96%E4%B8%AD%EF%BC%8C%E7%AC%AC1.2%E8%8A%82%E4%B8%AD%EF%BC%8C%E5%B0%B1%E4%BB%8B%E7%BB%8D%E4%BA%86Yaml%E3%80%81XML%E5%92%8CGraphiz">https://xie.infoq.cn/article/6f8ff63d6b88480c05f805d96中，第1.2节中，就介绍了Yaml、XML和Graphiz</a> dot等几种格式，也有工具可以输出json格式的语法树结构，例如Coverity的CodeXM规则开发中，就支持先输出json格式的语法树给规则开发提供支持。</p>
<p>当然，一般资料中在进行介绍时，都是以操作符作为根节点，画个树状的结构来表示，这里咱们也简单画一个意思一下，如下图：</p>
<p><img src="/2022/10/24/program-representation-ast-ssa/ast.png" alt="AST示例"></p>
<div align="center">图1.1 AST示例</div>

<h2 id="1-2-三地址码"><a href="#1-2-三地址码" class="headerlink" title="1.2 三地址码"></a>1.2 三地址码</h2><p>三地址码是一种有意思的中间表示，当前也是编译原理中用得最火的。这里我给大家梳理一种我的理解上的概念，那就是，<strong>刨掉赋值操作，最多只有一个操作符</strong>，先看下面的几个例子：</p>
<ul>
<li>x &#x3D; y bop z</li>
<li>x &#x3D; uop y</li>
<li>x &#x3D; y</li>
<li>goto L</li>
</ul>
<p>如上，第一个，除了赋值之外，只有 <code>bop</code> 一个操作符，第二个，只有 <code>uop</code> 一个操作符，第三个没有操作符，同时，操作符的概念可以进一步扩展到函数调用等，例如 <code>call fun(a, b, c, d)</code>，虽然有四个操作数，但是我们认为 call fun只是一个操作符。</p>
<p>如上面 <code>x = 3 + 4 * y</code> 转换为三地址码如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">t1 = 4</span><br><span class="line">t2 = y</span><br><span class="line">t3 = t1 * t2</span><br><span class="line">t4 = 3</span><br><span class="line">t5 = t4 + t3</span><br><span class="line">x = t5</span><br></pre></td></tr></table></figure>

<p>当然，有些形式下会减少临时变量的使用，尽量复用原来的变量或者常量，形成的三地址码如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">t1 = 4 * y</span><br><span class="line">x = 3 + t1</span><br></pre></td></tr></table></figure>

<p>三地址码最初只是处理类似于 <code>x = y bop z</code> 这种形式的语句，而提出来的“三个操作数”的意思，随着语法的扩充，也并不是完全就是“三地址”。</p>
<h3 id="1-3-AST和三地址码对比"><a href="#1-3-AST和三地址码对比" class="headerlink" title="1.3 AST和三地址码对比"></a>1.3 AST和三地址码对比</h3><p>下面介绍几点AST和三地址码的对比特点：</p>
<ul>
<li>源码相关性</li>
</ul>
<p>AST中的节点与输入源代码中的各个语法元素一一对应，忠实地体现了源码的内容和语法特性，因此AST与源码强相关；三地址码就是从AST进一步抽象的一种中间表示，更接近机器语言，可以认为和语言无关，是连接前后端的一种中间表示。</p>
<ul>
<li>变化频繁程度</li>
</ul>
<p>因为AST需要忠实地体现出源代码的语法元素，因此在对应的编程语言升级时，对应的AST必然会跟着发生变化，比如Java，从Java7变成Java8，增加了大量的Lambda表达式、函数引用等特性，所以AST节点也需要增加这些语法节点，所以AST的版本需要随着语言发布而不断变化。</p>
<p>但是三地址码是一种经过处理的语言无关的中间表示，即使源代码结构变化，AST结构变化，但是转换后的三地址码是稳定的，不会经常发生变化，构造在三地址码上面的分析算法就相对比较稳定。</p>
<ul>
<li>结构</li>
</ul>
<p>AST体现源码的结构，需要匹配源码的语法，因此一般结构比较复杂，而三地址经过处理，一般比较紧凑，简单。例如，Java中，对 for，while，do while 有多种不同的循环方式，但是，其实内容大同小异，但是在AST层面，就是不一样的，但是转换为三地址码后，所表达的控制语义是完全一样的。</p>
<ul>
<li>表达信息</li>
</ul>
<p>AST表达了源码的信息，因此可以在AST上做程序结构的检查，但是三地址码中，可以更好地包含了程序控制流和数据流信息，能进行更深层次的流敏感分析，过程间分析，上下文敏感分析和对象敏感分析等等，从而实现各种更高难度的程序漏洞检查。</p>
<p>同时，三地址码因为是语言无关的， 所以在部分静态代码分析工具实现时，会对不同的三地址码，实现一个分析引擎，只是通过开发不同语言的规则，实现对不同语言的能力的覆盖，而AST是无法做到这一点的。因此，三地址码也被认为是静态代码分析的基础。</p>
<h2 id="2-SSA形式"><a href="#2-SSA形式" class="headerlink" title="2 SSA形式"></a>2 SSA形式</h2><h3 id="2-1-SSA概念及分类"><a href="#2-1-SSA概念及分类" class="headerlink" title="2.1 SSA概念及分类"></a>2.1 SSA概念及分类</h3><h4 id="2-1-1-SSA概念"><a href="#2-1-1-SSA概念" class="headerlink" title="2.1.1 SSA概念"></a>2.1.1 SSA概念</h4><p>SSA（Static Single Assignment，静态单赋值），顾名思义，就是每个变量只有唯一的赋值。以下面的代码举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">3</span>) &#123;</span><br><span class="line">        y = x + <span class="number">4</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        y = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">z</span> <span class="operator">=</span> y + <span class="number">3</span>;</span><br><span class="line">    System.out.println(z);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以下图为例，左图是原始代码，里面有分支， y 变量在不同路径中有不同赋值，最后打印 z的值。右图是等价的 SSA 形式，y 变量在两个分支中被改写为 y2, y3，在控制流交汇处插入φ函数，合并了来自不同边的 y2, y3值, 赋给 y4 最后z由y4生成。</p>
<p><img src="/2022/10/24/program-representation-ast-ssa/basic_ssa.png"></p>
<div align="center">图2-1 原始代码与 SSA 形式及相应 CFG 控制流图</div>

<p>其实要讲SSA形式，就不能离开对DU Chain（Define-Use Chain）和UD Chain（Use-Define Chain）的介绍，因为很多地方对SSA的概念的介绍，都是从DU Chain和UD Chain引起的。Use-Define Chain 是一个数据结构，包含一个Define变量，以及它的全部Use的集合。相对的，Define-Use Chain 包含一个Use变量，以及它的全部 Define的集合。</p>
<p>另外一种SSA的描述，就是在 Define-Use Chain中，每一个Use变量，只会有一个Define，例如，在前面例子中，<code>z = y + 3</code> 中，因为此时 y可能在两个分支中赋值，因此，对于变量 <code>z = y + 3</code> 中，y 的Use来说，有两个 Define，但是，通过更改为 SSA形式，<code>z = y + 3</code> 中，y只有一个 Define，那就是 y4。因此，通过将三地址码转为SSA形式，可以很大程度上，简化Use-Define Chain和Define-Use Chain。</p>
<h4 id="2-1-2-SSA分类"><a href="#2-1-2-SSA分类" class="headerlink" title="2.1.2 SSA分类"></a>2.1.2 SSA分类</h4><p>SSA 有几种不同分类（主要是最小SSA、剪枝SSA、半剪枝SSA，另外两种严格SSA和最大SSA，大部分资料上都没有看到，只是在少部分资料中有见到，所以简单提一下）：</p>
<ul>
<li>最小 SSA</li>
</ul>
<p>最小SSA有以下特点：同一原始名字的两个不同定义的路径汇合处都插入一个φ函数。这样得到符合两大特征的且拥有最少φ函数数量的 SSA 形式。但是这里的最小不包含优化效果，比如死代码消除。如上面图2.1节，就是一个最小SSA形式。</p>
<ul>
<li>剪枝 SSA</li>
</ul>
<p>如果变量在基本块的入口处不是活跃 (live) 的，就不必插入φ函数。一种方法是在插入 φ函数的时候计算活跃变量分析。另一种剪枝方式是在最小SSA上做死代码消除，删掉多余的φ函数。如下面的例子，y在分支执行完后，在最后的BB块中不再使用，y已经不再活跃，此时没必要在这个节点添加φ函数，如下面右图红色标出来的位置（说明：虽然不是剪枝SSA，但是仍然是最小SSA）。</p>
<p><img src="/2022/10/24/program-representation-ast-ssa/min_ssa.png"></p>
<div align="center">图2.2 剪枝SSA和最小SSA说明</div>

<ul>
<li>半剪枝 SSA</li>
</ul>
<p>鉴于剪枝 SSA 的成本，可以稍微折衷一点。插入φ函数前先去掉非跨越基本块的变量名。这样既减少了名字空间也没有计算活跃变量集的开销。如下图所示，y变量除了Define，并没有Use，所以，变量y其实可以去掉，如下右图：</p>
<p><img src="/2022/10/24/program-representation-ast-ssa/half_scissor_ssa.png"></p>
<div align="center">图2.3 半剪枝SSA形式</div>

<ul>
<li>严格 SSA</li>
</ul>
<p>如果一个 SSA中，每个Use被其Define支配（如果从程序入口到一个结点 A 的所有路径，都先经过结点B，则称A被B支配），那么称为严格 SSA（实际上，在强类型语言中，这种情况比较少，因为没有定义，就不允许使用，在少数动态类型语言中，允许没有定义就可以使用的才有这类问题）。</p>
<ul>
<li>最大SSA</li>
</ul>
<p>最大SSA是相对最小SSA而言的，就是在每个汇合点处为每个变量放置一个φ函数。很显然，这种方法会导致SSA的使用效率最差，用户体验也很差，我估计谁生成的SSA是这样的形式，会被使用的人打死的。</p>
<h3 id="2-2-SSA形式和普通三地址码对比"><a href="#2-2-SSA形式和普通三地址码对比" class="headerlink" title="2.2 SSA形式和普通三地址码对比"></a>2.2 SSA形式和普通三地址码对比</h3><p>其实对比SSA形式和普通的三地址码形式，只有一个区别，那就是，SSA形式，对于每个Use，只会有一个Define。两者在一定程度上，还是非常类似的。那么主要对比在于两种形式的各自的优缺点：</p>
<ul>
<li>SSA形式相对于三地址码，会引入大量的额外的临时变量，同时需要插入φ函数，还需要维护这些临时变量到原始变量的映射关系（当然，仁者见仁，智者见智，也有资料觉得这些额外的临时变量可以忽略，驳斥这个观点为谬论，不过的确还是有其不舒服的地方的）；</li>
<li>SSA形式的优势在于，SSA形式简化了DU Chain和UD chain，构建了一种稀疏结构，可以简化数据流分析（一般基于三地址码，需要基于传统的数据流分析来进行分析，称为dense分析，基于SSA形式，可以构造值依赖关系，基于值流分析，也称为sparse分析，同时，SSA形式也隐含了一定的程序流信息）。</li>
<li>SSA形式相比于普通三地址码，可以优化常量传播、值依赖分析、死代码、重复代码删除等；</li>
</ul>
<h2 id="3-CFG、基本块"><a href="#3-CFG、基本块" class="headerlink" title="3. CFG、基本块"></a>3. CFG、基本块</h2><p>这里简单介绍基本块和CFG的概念，对于如何构造基本块和CFG，会在后面进行介绍（这里强调一点：我个人倾向于将CFG和基本块等概念，当做中间表示的一部分，因为在很多开发实践中，将CFG、基本块的构造，和三地址码的生成，放在相同阶段，并且都是分析的输入，当然也有资料将CFG和基本块不当做中间表示的一部分，而当做中间表示在分析前的预处理，不过怎么理解都行，没有太大关系）。</p>
<h3 id="3-1-基本块（Basic-Block）"><a href="#3-1-基本块（Basic-Block）" class="headerlink" title="3.1 基本块（Basic Block）"></a>3.1 基本块（Basic Block）</h3><p>基本块由一系列的语句组成，这些语句具有如下特点：</p>
<ul>
<li>只能从第一条语句进入该基本块，不能够以某种方式跳入该基本块的中间;</li>
<li>基本块内的语句在执行时必须从最后一条语句离开，不能够执行到一半跳转到其它的基本块;</li>
<li>基本块内的语句序列，必须按照顺序依次执行。</li>
</ul>
<p>即对于一个基本块来说：只能有唯一一个进入点（基本块第一条语句）和唯一的一个出口（基本块最后一条语句），并且内部必须顺序执行，不能有分支和跳转。</p>
<h3 id="3-2-CFG"><a href="#3-2-CFG" class="headerlink" title="3.2 CFG"></a>3.2 CFG</h3><p>CFG是一个由基本块组成的有向图，每个节点都是一个基本块。如果程序的执行路径可能从一个基本块B1进入另一个基本块B2，B1有一条指向B2的边。</p>
<p>CFG可以用一个三元式描述：<code>G=(N, E, n0)</code></p>
<p>其中：</p>
<ul>
<li>N：表示所有基本块节点的集合；</li>
<li>E：表示所有边的集合；</li>
<li>n0：表示首节点。</li>
</ul>
<p>CFG具有如下的两条性质：</p>
<ul>
<li>CFG 必然有唯一的一个入口点；</li>
<li>首节点必然支配CFG中其他的所有节点（即从首节点到CFG上其他任何一个节点都有一条路可以连通）。</li>
</ul>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h2><p>本文介绍了一些静态代码分析中，中间表示的一些基本概念。</p>
<p>首先介绍了AST，AST忠实体现源码的结构，可以应用于程序结构检测、程序风格检查等检查；</p>
<p>其次，介绍了三地址码、SSA形式的三地址码，随后介绍了基本块和CFG，基本块就是一系列符合条件的三地址码指令的集合，CFG是一系列基本块按照一定依赖关系组合起来的。</p>
<p>基于CFG的中间表示，可以应用于程序的数据流分析、控制流分析等，是程序静态代码分析的基础。</p>
]]></content>
      <categories>
        <category>程序分析</category>
        <category>程序表示</category>
      </categories>
      <tags>
        <tag>AST</tag>
        <tag>SSA</tag>
        <tag>三地址码</tag>
        <tag>CFG</tag>
        <tag>BasicBlock</tag>
      </tags>
  </entry>
  <entry>
    <title>用于静态代码分析的程序表示</title>
    <url>/2022/10/24/program-representation/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>程序分析</category>
        <category>程序表示</category>
      </categories>
      <tags>
        <tag>AST</tag>
        <tag>SSA</tag>
        <tag>CFG</tag>
        <tag>程序表示</tag>
        <tag>PDG</tag>
        <tag>CDG</tag>
        <tag>DDG</tag>
        <tag>SDG</tag>
      </tags>
  </entry>
  <entry>
    <title>面向源码的静态代码分析简介</title>
    <url>/2022/10/23/sast-theory-intro/</url>
    <content><![CDATA[<h2 id="1-面向源码的静态分析概念"><a href="#1-面向源码的静态分析概念" class="headerlink" title="1. 面向源码的静态分析概念"></a>1. 面向源码的静态分析概念</h2><p>软件分析是一门非常大的学科，类型非常多。从不同的角度，可以分为不同的类型：</p>
<table>
<thead>
<tr>
<th>分类依据</th>
<th>分类结果</th>
</tr>
</thead>
<tbody><tr>
<td>分析的输入</td>
<td>基于源码的分析和基于二进制的分析</td>
</tr>
<tr>
<td>是否需要执行代码</td>
<td>静态分析和动态分析</td>
</tr>
<tr>
<td>分析方法</td>
<td>面向语法的分析和面向语义的分析</td>
</tr>
<tr>
<td>使用的具体算法</td>
<td>符号执行、抽象解释、定理证明、数据流分析等</td>
</tr>
</tbody></table>
<span id="more"></span>

<p>这里简单介绍面向源码的静态代码分析的相关的内容。从上面的几个名词约束，其分析的范围：</p>
<ul>
<li>面向源码的分析：或者是以源码为输入的分析</li>
<li>不需要运行代码：静态分析，因此分析过程中不需要运行代码</li>
<li>分析的方法和算法：基于业务目标，可涵盖可用的所有的分析方法</li>
</ul>
<p>我们从事软件开发的同事，对这类工具不会陌生，其广泛应用与我们的开发过程中，而且有非常多的典型工具。</p>
<h2 id="2-面向源码的静态分析工具的应用"><a href="#2-面向源码的静态分析工具的应用" class="headerlink" title="2. 面向源码的静态分析工具的应用"></a>2. 面向源码的静态分析工具的应用</h2><p>面向源码的静态代码分析的典型应用：</p>
<ul>
<li>编程规范遵从</li>
<li>软件缺陷及安全分析，例如死锁、数据竞争、缓冲区溢出、信息泄露、注入等；</li>
<li>缺陷分类分级：告警合并、告警等级判断</li>
<li>缺陷自动修复：Patch自动生成、代码推荐</li>
<li>程序理解：IDE工具、函数调用关系、软件构建依赖等</li>
<li>代码度量：圈复杂度、代码深度等</li>
<li>性能分析：可进行优化的代码分析，比如 for 循环等</li>
</ul>
<p>我们可以看到，面向源码的静态代码分析，主要应用与软件的开发过程，应用与 IDE 和 代码提交 及 构建过程，可以很好的和企业的 DevSecOps 过程（或者说 CI&#x2F;CD 过程）进行集成，因此应用非常广泛。相对于其它的分类的程序分析，这类工具也是最多的。</p>
<p><strong>说明</strong>：没有涉及到编译器本身的优化，主要的目的在于代码检查，本人一直接触的工作范围。</p>
<h2 id="3-面向源码的静态分析工具的实现"><a href="#3-面向源码的静态分析工具的实现" class="headerlink" title="3. 面向源码的静态分析工具的实现"></a>3. 面向源码的静态分析工具的实现</h2><p>面向源码的静态代码分析，是编译原理技术的延伸，或者说，静态代码分析技术，是随着编译原理技术发展起来的。</p>
<p>当然，不仅仅是面向源码的静态分析工具，应该说，整个软件分析，都是随着编译原理技术延伸出来的。因此，编译原理的相关知识，是软件分析的基础。</p>
<p>我们通常实现一款面向源码的分析工具，就是实现一款可以自动分析一个程序，可以自动分析出上面提到的可以做到的那些应用（程序的正确性、可靠性、安全性等）。</p>
<p>为了能够很好地实现这样的一款工具，从大方向上，需要下面的两点内容：</p>
<ul>
<li>精确的程序表示（例如AST，CFG，CG，IR，SSA，CDG，DDG，PDG，SDG等）</li>
<li>系统的方法（数据流分析、符号执行、抽象解释等）基于这个表示来推导是否有某种属性（某类问题或者缺陷）</li>
</ul>
<p>这一部分可以延伸出来很多的知识点，上面提到的概念也有点儿多，后面会进行一系列地介绍。这里宽泛的解释就是：我们要自动地分析源码，就首先需要把源码表示成某种等价的适合分析的形式，然后用特定的分析算法，来分析这种形式，从而得到分析结果（前面提到的可以做到的事情）。</p>
<h2 id="4-面向源码的静态分析的矛盾点"><a href="#4-面向源码的静态分析的矛盾点" class="headerlink" title="4. 面向源码的静态分析的矛盾点"></a>4. 面向源码的静态分析的矛盾点</h2><h3 id="4-1-误报和漏报情况"><a href="#4-1-误报和漏报情况" class="headerlink" title="4.1 误报和漏报情况"></a>4.1 误报和漏报情况</h3><h4 id="4-1-1-莱斯定理"><a href="#4-1-1-莱斯定理" class="headerlink" title="4.1.1 莱斯定理"></a>4.1.1 莱斯定理</h4><p>经典的<strong>莱斯定理</strong>：关于程序行为的任何非平凡属性，都不存在可以检查该属性的通用算法。</p>
<ul>
<li>平凡属性：要么对全体程序都为真，要么对全体程序都为假</li>
<li>非平凡属性：不是平凡的所有属性（比如是否存在空指针，是否存在注入等）</li>
</ul>
<p>关于程序行为：即能定义在程序上的属性。所以，从 莱斯定理来看，误报和漏报总是会存在，不可避免（当然，针对的是非平凡属性）。</p>
<h4 id="4-1-2-几个相关的概念"><a href="#4-1-2-几个相关的概念" class="headerlink" title="4.1.2 几个相关的概念"></a>4.1.2 几个相关的概念</h4><p>从分析的结果讲，对缺陷分类，有FP，FN之类的几个概念：</p>
<table>
<thead>
<tr>
<th></th>
<th>工具有扫描出来缺陷</th>
<th>工具没有扫描出来缺陷</th>
</tr>
</thead>
<tbody><tr>
<td>实际有缺陷</td>
<td>TP(True Positive)</td>
<td>FN(False Negative)</td>
</tr>
<tr>
<td>实际没有缺陷</td>
<td>FP(False Positive)</td>
<td>TN(True Negative)</td>
</tr>
</tbody></table>
<p>从分析的精度情况，有 sound 和 complete 等概念：</p>
<ul>
<li>sound：分析的结果包含了全部的正确结果，但是有可能包含部分错误的结果</li>
<li>complete：分析的结果都是对的，但是可能不全</li>
</ul>
<p>大家可以看看下面的图：<br><img src="/2022/10/23/sast-theory-intro/sound_complete.png" alt="sound and complete description"></p>
<p>从实际分析来看，我们实现的工具，经常都是既不 sound，又不 complete，因为我们要在分析的性能上做大，当然有时候也的确是咱们能力达不到，举几个实际的情况：</p>
<ul>
<li>跨过程分析时，分析1-2层，上下文还比较准确，等分析的层数越多，就越不准</li>
<li>某个函数，因为是个公共函数，被调用了几百次，我们还要不要每次都分析到呢？</li>
<li>Java 里面的泛型、反射</li>
<li>第三方库的建模</li>
<li>…</li>
</ul>
<p>现实中，有非常非常多的语法特性，使我们的分析变得不准确。</p>
<p>从实现上，sound 一般对应的是 <strong>过近似（upper&#x2F;over-approximate）</strong>，complete 一般对应的是 <strong>欠近似（lower&#x2F;under-approximate）</strong>。</p>
<p>从另外一个角度：sound 是 <strong>may analysis</strong>，就是分析结果可能是符合某个属性的分析，complete 是 <strong>must analysis</strong>，就是分析结果必须是符合某个属性。</p>
<h4 id="4-1-3-sound-和-complete-哪个更重要？"><a href="#4-1-3-sound-和-complete-哪个更重要？" class="headerlink" title="4.1.3 sound 和 complete 哪个更重要？"></a>4.1.3 sound 和 complete 哪个更重要？</h4><p>这个问题，换个问法就是 报全 和 报准 哪个更重要？</p>
<p>这个问题不好说，不同的人有不同的回答：</p>
<p>审计的同事：报全更重要，可能的问题充分暴露出来，只要有一条是正确的，就是有价值的。</p>
<p>告警清理的同事：报准更重要，误报高会带来大量的无效工作，时间都浪费掉了。</p>
<p>某些领导：就不能报全，还没有误报吗？</p>
<p>我想说的是：如果是第三方工具提供商，建议提供个参数给用户选择尽量报全还是尽量报准，如果是在企业内部，开发的工具是给内部用的，那么我的想法就是：在少点儿投诉的情况下，尽量满足领导的要求。</p>
<h3 id="4-2-分析性能"><a href="#4-2-分析性能" class="headerlink" title="4.2 分析性能"></a>4.2 分析性能</h3><p>主要的考虑点：</p>
<ul>
<li>企业构建流程集成的需要</li>
</ul>
<p>面向源码的静态代码分析工具，在企业中进行选用的时候，一般都是放在DevSecOps（或CI&#x2F;CD）流程中的，为了能够及时出来分析结果，有非常高的性能要求，因为持续构建流水线有时间窗，无法在这中间出来结果，则表示工具不可用；</p>
<ul>
<li>程序员解决问题具有时效性</li>
</ul>
<p>从经验来看，程序员开发完代码后，在功能完备的情况下，越晚报出相关缺陷，程序员修改的意愿越低。其实很合理，如果我实现了个功能，第二天早上告诉我说有点儿问题，我可能还乐意修改，但是如果隔一个月告诉我有问题，我可能就不想动了。</p>
<p>从实际情况来看，性能有时候，比准确性还重要，尤其是在企业应用的环境下。有些没有这方面概念的领导，会无限压榨工具的开发同事，要求提高分析的性能（本人曾经遇到过百万行代码要求秒级分析完成的要求）。</p>
<h2 id="5-面向源码的静态代码分析的部分新发展趋势"><a href="#5-面向源码的静态代码分析的部分新发展趋势" class="headerlink" title="5. 面向源码的静态代码分析的部分新发展趋势"></a>5. 面向源码的静态代码分析的部分新发展趋势</h2><ul>
<li>AI在静态代码分析中的应用</li>
</ul>
<p>随着积累的缺陷数据增加，基于机器学习、数据挖掘等技术，检查缺陷、识别误报、对缺陷进行分类等，是一个很重要的应用方向，相关的论文非常多；</p>
<ul>
<li>随着分布式计算发展，规模代码的快速分析成为现实</li>
</ul>
<p>对于大工程，通过拆分成不同的任务，并行分析，甚至是分发到不同的机器上执行，可以有效节省时间。参考南京大学左志强老师相关的研究。</p>
<ul>
<li>静态分析在软件工程领域的深度融合</li>
</ul>
<p>围绕静态分析的应用，在软件工程领域形成的一系列应用，参考 华为梁广泰 在 SIG-程序分析 中的分享。</p>
<ul>
<li>其它</li>
</ul>
<p>当然，程序分析相关的技术的研究，一直都还非常活跃，比如 面向特定语言的指向分析、形式化验证、特定类型缺陷的检查、缺陷自动化修复、程序合成 等。</p>
<h2 id="6-参考资料"><a href="#6-参考资料" class="headerlink" title="6. 参考资料"></a>6. 参考资料</h2><ul>
<li>北京大学 熊英飞 教学系列</li>
<li>南京大学 谭添、李樾 系列视频</li>
<li>左志强 系统化程序分析</li>
<li>梁广泰 基于软件分析的智能化开发新型服务与技术</li>
</ul>
]]></content>
      <categories>
        <category>程序分析</category>
        <category>程序分析简介</category>
      </categories>
      <tags>
        <tag>程序分析</tag>
      </tags>
  </entry>
</search>
